# Generated by Django 5.2.3 on 2025-06-14 21:28

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="MathMatriculationTrainingTasks",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "category_type",
                    models.IntegerField(
                        choices=[
                            (1, "Real numbers"),
                            (2, "Language of mathematics"),
                            (3, "Systems of equations"),
                            (4, "Functions"),
                            (5, "Linear function"),
                            (6, "Planimetry"),
                            (7, "Quadratic function"),
                            (8, "Polynomials"),
                            (9, "Measurable function"),
                            (10, "Trigonometry"),
                            (11, "Planimetry circles"),
                            (12, "Exponential and logarithmic functions"),
                            (13, "Trigonometric functions"),
                            (14, "Analytical geometry"),
                            (15, "Sequences"),
                            (16, "Differential calculus"),
                            (17, "Statistics"),
                            (18, "Probability"),
                            (19, "Stereometry"),
                        ]
                    ),
                ),
                ("task_content", models.TextField()),
                ("answer", models.CharField(max_length=100)),
                (
                    "level_type",
                    models.IntegerField(
                        choices=[(1, "Easy"), (2, "Intermediate"), (3, "Advanced")]
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Exam",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "year",
                    models.IntegerField(
                        choices=[
                            (2002, "2002"),
                            (2003, "2003"),
                            (2004, "2004"),
                            (2005, "2005"),
                            (2006, "2006"),
                            (2007, "2007"),
                            (2008, "2008"),
                            (2009, "2009"),
                            (2010, "2010"),
                            (2011, "2011"),
                            (2012, "2012"),
                            (2013, "2013"),
                            (2014, "2014"),
                            (2015, "2015"),
                            (2016, "2016"),
                            (2017, "2017"),
                            (2018, "2018"),
                            (2019, "2019"),
                            (2020, "2020"),
                            (2021, "2021"),
                            (2022, "2022"),
                            (2023, "2023"),
                            (2024, "2024"),
                            (2025, "2025"),
                        ]
                    ),
                ),
                (
                    "month",
                    models.IntegerField(
                        choices=[
                            (1, "January"),
                            (2, "February"),
                            (3, "March"),
                            (4, "April"),
                            (5, "May"),
                            (6, "June"),
                            (7, "July"),
                            (8, "August"),
                            (9, "September"),
                            (10, "October"),
                            (11, "November"),
                            (12, "December"),
                        ]
                    ),
                ),
                ("tasks_link", models.URLField(verbose_name="Tasks link")),
                ("solutions_link", models.URLField(verbose_name="Solutions link")),
                (
                    "tasks_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of tasks in this exam"
                    ),
                ),
                (
                    "level_type",
                    models.IntegerField(
                        choices=[(1, "Basic"), (2, "Extended")],
                        default=1,
                        help_text="Exam level: basic or extended",
                    ),
                ),
            ],
            options={
                "ordering": ["-year", "-month"],
                "unique_together": {("year", "month")},
            },
        ),
        migrations.CreateModel(
            name="MathMatriculationTasks",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("task_id", models.IntegerField()),
                (
                    "category",
                    models.IntegerField(
                        choices=[
                            (1, "Sequences"),
                            (2, "Proofs (Special products)"),
                            (3, "Proofs (Divisibility)"),
                            (4, "Quadratic function – Viète's formulas"),
                            (5, "Quadratic function – optimization"),
                            (6, "Quadratic function"),
                            (7, "Linear function"),
                            (8, "Rational functions (x in denominator)"),
                            (9, "Analytical geometry"),
                            (10, "Prisms"),
                            (11, "Limits"),
                            (12, "Spheres, cylinders and cones"),
                            (13, "Logarithms"),
                            (14, "Inequalities and equations"),
                            (15, "Reading function properties"),
                            (16, "Pyramids"),
                            (17, "Planimetry – quadrilaterals"),
                            (18, "Planimetry – triangles and circles"),
                            (19, "Derivative – optimization"),
                            (20, "Derivative"),
                            (21, "Powers"),
                            (22, "Probability"),
                            (23, "Percentages"),
                            (24, "Trigonometric equations and inequalities"),
                            (25, "Equations with absolute value"),
                            (26, "Statistics"),
                            (27, "Geometric series"),
                            (28, "Trigonometry"),
                            (29, "Systems of equations"),
                            (30, "Polynomials"),
                            (31, "Special product formulas"),
                            (32, "Non-standard tasks"),
                        ]
                    ),
                ),
                ("type", models.IntegerField(choices=[(1, "Basic"), (2, "Extended")])),
                (
                    "exam",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tasks",
                        to="examination_tasks.exam",
                    ),
                ),
            ],
            options={
                "ordering": ["exam", "task_id"],
            },
        ),
    ]
